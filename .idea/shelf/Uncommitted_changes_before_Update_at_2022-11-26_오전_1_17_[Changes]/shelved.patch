Index: src/main/java/bankSystem/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package bankSystem;\r\n\r\nimport bankSystem.interFace.*;\r\n\r\nimport java.util.InputMismatchException;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n        //인터페이스들을 생성하기위한 부분\r\n        MainInterface mainIn = new MainInterface();\r\n        CustomerInterface customerInterface = new CustomerInterface();\r\n        RePasswordInterface rePasswordInterface = new RePasswordInterface();\r\n        BankInterface bankInterface = new BankInterface();\r\n        //고객인지 관리자인지 알기위한 관리자비밀번호\r\n        String adminpassword = \"1234\";\r\n        //고객 정보 전체를를 담아둘 은행 하나 생성;\r\n        Bank bankAll = new Bank();\r\n        Customer customer = new Customer();\r\n        //고객 창으로 이동을 위해 선언\r\n\r\n\r\n        int adminCustomer;\r\n        mainIn.banner();\r\n        while (true) {\r\n            mainIn.run();\r\n            // 메뉴 입력받기\r\n            // InputMismatchException에 대한 예외처리 진행\r\n            // 숫자를 제외한 형식을 입력했을때\r\n            // 시스템 정지가 아닌 다시 입력하도록 함\r\n            try {\r\n                //고객인가 관리자인가 구분자 입력\r\n                adminCustomer = scanner.nextInt();\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"숫자만 입력해주시기 바랍니다.\");\r\n                scanner = new Scanner(System.in);\r\n                continue;\r\n            }\r\n            switch (adminCustomer) {\r\n                //관리자인가 고객인가 선택\r\n                //메인밖에 클래스로 뺄것인가 아니면 이상태로 할것인가는;;\r\n                //완성하거나 or 회의하고 바꾸는걸로\r\n                //case1로 가면 뱅크 클래스 시스템으로 case2로 가면 고객 클래스 시스템으로\r\n                //가는 형식 등\r\n                case 1:\r\n                    System.out.println(\"관리자 비밀번호를 입력해주시기 바랍니다.\");\r\n                    //비밀번호 입력\r\n                    scanner = new Scanner(System.in);\r\n                    String tempass = scanner.nextLine();\r\n                    //비밀번호 일치여부 확인\r\n                    if (adminpassword.equals(tempass)) {\r\n                        //while문을 돌리기 위한 변수\r\n                        boolean isInOut = false;\r\n                        //관리자 메인으로 이동하거나 여기에서 while문 을 돌릴곳\r\n                        while (!isInOut) {\r\n                            bankInterface.bankRun();\r\n                            scanner = new Scanner(System.in);\r\n                            int adminSelect = 0;\r\n                            try {\r\n                                adminSelect = scanner.nextInt();\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"숫자만 입력해주시기 바랍니다.\");\r\n                                continue;\r\n                            }\r\n                            switch (adminSelect) {\r\n                                case 1:\r\n                                    bankAll.bankCreate();\r\n                                    break;\r\n\r\n                                case 2:\r\n                                    bankAll.changeCustomer();\r\n                                    break;\r\n\r\n                                case 3:\r\n                                    bankAll.deleteCustomer();\r\n                                    break;\r\n\r\n                                case 4:\r\n                                    bankAll.selectAccountView();\r\n                                    break;\r\n\r\n                                case 5:\r\n                                    bankAll.allAccountView();\r\n                                    break;\r\n\r\n                                default:\r\n                                    isInOut = true;\r\n                                    break;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        rePasswordInterface.rePass();\r\n                    }\r\n                    continue;\r\n                case 2:\r\n                    customer.customertAccountView();\r\n                    continue;\r\n                case 3:\r\n                    System.out.println(\"프로그램을 종료합니다.\");\r\n                    break;\r\n            }break;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/bankSystem/Main.java b/src/main/java/bankSystem/Main.java
--- a/src/main/java/bankSystem/Main.java	(revision 6d82a6f9ac0ea05a4b83fff5b5f8064599e4b0bb)
+++ b/src/main/java/bankSystem/Main.java	(date 1669392772117)
@@ -95,7 +95,7 @@
                     }
                     continue;
                 case 2:
-                    customer.customertAccountView();
+                    customer.referCustomerAccount();
                     continue;
                 case 3:
                     System.out.println("프로그램을 종료합니다.");
Index: src/main/java/bankSystem/BankList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package bankSystem;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\n\r\n//고객 리스트는\r\n//이름, 비밀번호, 계좌번호 로 구성된다\r\n//이름을 고유로 할지 다른게 할지는 회의를 통해진행한다.\r\nclass BankSystemItem {\r\n    private int idx, balance;\r\n    private String name, password, accountNumber, date;\r\n    public BankSystemItem(){}\r\n    public BankSystemItem(int idx, String name, String password, String accountNumber, String date){\r\n        this.idx = idx;\r\n        this.name = name;\r\n        this.password = password;\r\n        this.accountNumber = accountNumber;\r\n        this.date= date;\r\n    }\r\n    //순서대로 생성수, 고객이름,비밀번호,계좌번호,날짜이다.\r\n    public int getBankIdx(){return idx;}\r\n    public String getCustomerName(){return name;}\r\n    public String getCustomerPassword(){return password;}\r\n    public String getCustomerAccountNumber(){return accountNumber;}\r\n    public int getCustomerBalance(){return balance;}\r\n    public String getCustomerConnectDate(){return date;}\r\n\r\n    //순서대로 이름, 비밀번호,계좌번호이다.\r\n    public void setCustomerName(String changeName){\r\n        password = changeName;\r\n    }\r\n    public void setCustomerPassword(String changePass){\r\n        password = changePass;\r\n    }\r\n    public void setCustomerAccountNumber(String changeAccountNumber){accountNumber = changeAccountNumber;}\r\n\r\n    public void setDeposit(int deposit) { balance += deposit;}\r\n    public void setWithdraw(int withdraw) { balance -= withdraw;}\r\n}\r\npublic class BankList {\r\n\r\n\r\n    static int count= 0;\r\n    static ArrayList<BankSystemItem> bankArraylist;\r\n\r\n    //리스트 한개를 생성한다;\r\n    public BankList(){\r\n        bankArraylist = new ArrayList<>();\r\n    }\r\n\r\n\r\n    //계좌번호 중복 검사를 해주는 메소드\r\n    public boolean accountGetter(String accountName){\r\n        for (BankSystemItem item : bankArraylist) {\r\n            //중복검사 문자열인 getCustomerAccountNumer와 들어온 어카운트가 같은지 확인한다.\r\n            //같다면 false보내서 !(반대로 바꾸는거 flase -> true) 조건문을 충족시킨다\r\n            if (item.getCustomerAccountNumber().equals(accountName)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //나중에 비교 메소드 만들어보기\r\n    //너무많이쓰니까 규칙찾아서 클래스나 메소드 하나로 만들어서 사용하는것이 좋을것같다.\r\n//    public boolean checkEquals(){\r\n//\r\n//        return\r\n//    }\r\n    //입력된값을 리스트에 넣어주는 setter\r\n    //1번 계좌 등록에 사용되는 메소드\r\n    public void Setter(String name, String password, String accountNumber){\r\n        count++;\r\n\r\n        Date dateUpdate = new Date();\r\n        SimpleDateFormat formatterUpdate = new SimpleDateFormat(\"dd/MM/yyyy HH:mm:ss\");\r\n        String dateTime = formatterUpdate.format(dateUpdate);\r\n        BankSystemItem data = new BankSystemItem(count,name,password,accountNumber,dateTime);\r\n        bankArraylist.add(data);\r\n        System.out.println(\"생성자수 :\\t\"+data.getBankIdx() +\",\\t고객명 :\\t\"+data.getCustomerName()+\",\\t비밀번호 :\\t\"+data.getCustomerPassword()+\",\\t계좌번호 :\\t\"+data.getCustomerAccountNumber()\r\n                +\",\\t잔고 :\\t\"+data.getCustomerBalance()+\",\\t날짜시간 :\\t\"+data.getCustomerConnectDate());\r\n\r\n    }\r\n    //은행 2,3번 수정,삭제 Get메소드\r\n    //계좌 번호와 비밀번호를 받을것인지 고객명과 비밀번호를 받을것인지\r\n    //입력값이 은행에 존재하는지 확인해주는 메소드\r\n    public boolean aBooleanchangeGetter(String accountNumber, String password){\r\n        for(BankSystemItem item: bankArraylist){\r\n            if(item.getCustomerAccountNumber().equals(accountNumber) && item.getCustomerPassword().equals(password)){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    //은행 2-2번 수정 Set 메소드\r\n    //무엇을 수정할것인지 선택하게 할것인가\r\n    //비밀번호만 변경할것인가\r\n    //비밀번호를 변경해주는 메소드\r\n    public void changeSetter(String accountNumber, String changePassword){\r\n        for(BankSystemItem item: bankArraylist){\r\n            if(item.getCustomerAccountNumber().equals(accountNumber)){\r\n                item.setCustomerPassword(changePassword);\r\n            }\r\n        }\r\n    }\r\n    // 잔고에 입금해주는 메소드\r\n    public int depositSetter(BankSystemItem account, int deposit){\r\n            account.setDeposit(deposit);\r\n            return account.getCustomerBalance();\r\n        }\r\n\r\n    // 잔고에서 출금하는 메소드\r\n    public int withdrawSetter(BankSystemItem account, int withdraw){\r\n            account.setWithdraw(withdraw);\r\n            return account.getCustomerBalance();\r\n    }\r\n\r\n    // 잔고 확인해주는 메소드\r\n    public int readBalance(BankSystemItem account){\r\n       return account.getCustomerBalance();\r\n    }\r\n    //은행 3번 삭제 메소드\r\n    public boolean deleteCustomer(String accountNumber, String password){\r\n        for(BankSystemItem item: bankArraylist){\r\n            if(item.getCustomerAccountNumber().equals(accountNumber) && item.getCustomerPassword().equals(password)){\r\n                bankArraylist.remove(item);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //은행 4번내용 이름 검색 내용 출력\r\n    //이름 검색시 있다면 그 문자열을 반환해준다.\r\n    // 우선 한개만 되는지 확인\r\n    public BankSystemItem Getter(String name, int idx){\r\n        BankSystemItem item = bankArraylist.get(idx);\r\n        if(item.getCustomerName().equals(name)){\r\n            return item;\r\n        }else{\r\n            return null;\r\n        }\r\n\r\n    //은행 4번내용 계좌번호 검색 내용 출력\r\n    //이름 검색시 있다면 그 문자열 반환해준다.\r\n    }public BankSystemItem GetterAccountNumber(String accountNumber, int idx){\r\n        BankSystemItem item = bankArraylist.get(idx);\r\n        if(item.getCustomerAccountNumber().equals(accountNumber)){\r\n            return item;\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n    //5번 내용 반환\r\n    public BankSystemItem GetterAll(int idx){\r\n        BankSystemItem item = bankArraylist.get(idx);\r\n        return item;\r\n    }\r\n    public int lengthGetter(){\r\n        return bankArraylist.size();\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/bankSystem/BankList.java b/src/main/java/bankSystem/BankList.java
--- a/src/main/java/bankSystem/BankList.java	(revision 6d82a6f9ac0ea05a4b83fff5b5f8064599e4b0bb)
+++ b/src/main/java/bankSystem/BankList.java	(date 1669393026673)
@@ -117,7 +117,7 @@
     }
 
     // 잔고 확인해주는 메소드
-    public int readBalance(BankSystemItem account){
+    public int referBalance(BankSystemItem account){
        return account.getCustomerBalance();
     }
     //은행 3번 삭제 메소드
Index: src/main/java/bankSystem/Customer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package bankSystem;\r\n\r\nimport bankSystem.interFace.TransactionInterface;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Customer extends Bank {\r\n    Transaction transaction = new Transaction();\r\n    TransactionInterface transactionInterface = new TransactionInterface();\r\n\r\n    public void customertAccountView() {\r\n        Scanner scanner = new Scanner(System.in);\r\n        if (banklist.lengthGetter() == 0) {\r\n            System.out.println(\"가지고 계신 계좌가 없습니다.\");\r\n            return;\r\n        }\r\n        while (true) {\r\n            System.out.println(\"계좌번호로 계좌찾기을 원하시면 (1).\\n\" + \"소유주명으로 계좌찾기을 원하시면 (2).\");\r\n            int numberOrName = Integer.parseInt(scanner.nextLine());\r\n\r\n            switch (numberOrName) {\r\n                case 1:\r\n                    System.out.println(\"찾고 싶은 계좌명을 입력해주세요\");\r\n                    String checkAccountNumber = scanner.nextLine();\r\n\r\n                    for (int i = 0; i < banklist.lengthGetter(); i++) {\r\n                        BankSystemItem accountNumber = banklist.GetterAccountNumber(checkAccountNumber, i);\r\n                        if (accountNumber == null) {\r\n                            if(i == (banklist.lengthGetter()-1)){System.out.println(\"일치하는 계좌가 없습니다.\");}\r\n                        } else {\r\n                            System.out.println(\"비밀번호를 입력해주세요\");\r\n                            String password = scanner.nextLine();\r\n                            if(!(accountNumber.getCustomerPassword().equals(password))) {\r\n                                System.out.println(\"비밀번호가 틀렸습니다.\");\r\n                                break;\r\n                            }\r\n                            while (true) {\r\n                                System.out.println(\"입금을 원하시면 (1).\\n\" + \"출금을 원하시면 (2).\\n\" + \"거래내역 조회를 원하시면 (3).\\n\" + \"잔고 조회를 원하시면 (4).\");\r\n                                int depositOrWithdraw = Integer.parseInt(scanner.nextLine());\r\n\r\n                                switch (depositOrWithdraw) {\r\n                                    case 1:\r\n                                        System.out.println(\"입금하시려는 액수를 입력해주세요.\");\r\n                                        String tempType = \"Deposit\";\r\n                                        int deposit = Integer.parseInt(scanner.nextLine());\r\n                                        int tempDepositBalance =  banklist.depositSetter(accountNumber, deposit);\r\n                                        transaction.makeTransactionIntoList(null, checkAccountNumber, tempType, deposit, tempDepositBalance);\r\n                                        break;\r\n\r\n                                    case 2:\r\n                                        System.out.println(\"출금하시려는 액수를 입력해주세요.\");\r\n                                        String tempType2 = \"Withdraw\";\r\n                                        int withdraw = Integer.parseInt(scanner.nextLine());\r\n                                        int tempWithdrawBalance = banklist.withdrawSetter(accountNumber, withdraw);\r\n                                        transaction.makeTransactionIntoList(null, checkAccountNumber, tempType2, withdraw, tempWithdrawBalance);\r\n                                        break;\r\n                                    case 3:\r\n                                        System.out.println(\"-------거래내역-------\");\r\n                                        transaction.getTransactionListByAccountNumber(checkAccountNumber);\r\n                                        break;\r\n                                    case 4:\r\n                                        System.out.println(\"계좌 잔고는 \" + banklist.readBalance(accountNumber) + \"원 입니다.\");\r\n\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    } break;\r\n                case 2:\r\n                    System.out.println(\"찾고 싶은 계좌의 소유주명을 입력해주세요\");\r\n                    String checkAccountName = scanner.nextLine();\r\n                    for (int i = 0; i < banklist.lengthGetter(); i++) {\r\n                        BankSystemItem accountName = banklist.Getter(checkAccountName, i);\r\n                        if (accountName == null) {\r\n                            if(i == (banklist.lengthGetter()-1)){System.out.println(\"일치하는 계좌가 없습니다.\");}\r\n                        } else {\r\n                            System.out.println(\"비밀번호를 입력해주세요\");\r\n                            String password = scanner.nextLine();\r\n                            if(!(accountName.getCustomerPassword().equals(password))) {\r\n                                System .out.println(\"비밀번호가 틀렸습니다.\");\r\n                                break;\r\n                            }\r\n                            while (true) {\r\n                                System.out.println(\"입금을 원하시면 (1).\\n\" + \"출금을 원하시면 (2).\\n\" + \"거래내역 조회를 원하시면 (3).\\n\" + \"잔고 조회를 원하시면 (4).\");\r\n                                int depositOrWithdraw = Integer.parseInt(scanner.nextLine());\r\n\r\n                                switch (depositOrWithdraw) {\r\n                                    case 1:\r\n                                        System.out.println(\"입금하시려는 액수를 입력해주세요.\");\r\n                                        String tempType = \"Deposit\";\r\n                                        int deposit = Integer.parseInt(scanner.nextLine());\r\n                                        int tempDepositBalance = banklist.depositSetter(accountName, deposit);\r\n                                        transaction.makeTransactionIntoList(checkAccountName, null, tempType, deposit, tempDepositBalance);\r\n                                        break;\r\n                                    case 2:\r\n                                        System.out.println(\"출금하시려는 액수를 입력해주세요.\");\r\n                                        String tempType2 = \"Withdraw\";\r\n                                        int withdraw = Integer.parseInt(scanner.nextLine());\r\n                                        int tempWithdrawBalance = banklist.withdrawSetter(accountName, withdraw);\r\n                                        transaction.makeTransactionIntoList(checkAccountName, null, tempType2, withdraw, tempWithdrawBalance);\r\n                                        break;\r\n                                    case 3:\r\n                                        System.out.println(\"-------거래내역-------\");\r\n                                        transaction.getTransactionListByUserName(checkAccountName);\r\n                                        break;\r\n                                    case 4:\r\n                                        System.out.println(\"계좌 잔고는 \" + banklist.readBalance(accountName) + \"원 입니다.\");\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n            } break;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/bankSystem/Customer.java b/src/main/java/bankSystem/Customer.java
--- a/src/main/java/bankSystem/Customer.java	(revision 6d82a6f9ac0ea05a4b83fff5b5f8064599e4b0bb)
+++ b/src/main/java/bankSystem/Customer.java	(date 1669393026688)
@@ -8,7 +8,7 @@
     Transaction transaction = new Transaction();
     TransactionInterface transactionInterface = new TransactionInterface();
 
-    public void customertAccountView() {
+    public void referCustomerAccount() {
         Scanner scanner = new Scanner(System.in);
         if (banklist.lengthGetter() == 0) {
             System.out.println("가지고 계신 계좌가 없습니다.");
@@ -59,7 +59,7 @@
                                         transaction.getTransactionListByAccountNumber(checkAccountNumber);
                                         break;
                                     case 4:
-                                        System.out.println("계좌 잔고는 " + banklist.readBalance(accountNumber) + "원 입니다.");
+                                        System.out.println("계좌 잔고는 " + banklist.referBalance(accountNumber) + "원 입니다.");
 
                                 }
                                 break;
@@ -104,7 +104,7 @@
                                         transaction.getTransactionListByUserName(checkAccountName);
                                         break;
                                     case 4:
-                                        System.out.println("계좌 잔고는 " + banklist.readBalance(accountName) + "원 입니다.");
+                                        System.out.println("계좌 잔고는 " + banklist.referBalance(accountName) + "원 입니다.");
                                 }
                                 break;
                             }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"FrameworkDetectionExcludesConfiguration\">\r\n    <file type=\"web\" url=\"file://$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 6d82a6f9ac0ea05a4b83fff5b5f8064599e4b0bb)
+++ b/.idea/misc.xml	(date 1669392326276)
@@ -4,7 +4,7 @@
   <component name="FrameworkDetectionExcludesConfiguration">
     <file type="web" url="file://$PROJECT_DIR$" />
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
